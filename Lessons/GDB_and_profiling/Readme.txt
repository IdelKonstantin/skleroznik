ОТЛАДКА====================================================

1) Компиляция файла для отладки (debug):

	g++ main.cpp -ggdb(-g) -O0 (оптимизация отключена)

2) Запуск на отладку: 

	gdb (-q -tui) ./a.out
	gdb --args ./a.out <аргументы>
	gdb ./a.out <дамп памяти>
	gdb (file [filename] затем и set args [args])

3) Завершение работы:

	$q

4) Получение справки:

	$h
	$h <раздел>
	$h <команда>

5) Получение информации: 

	$show/info args
	$info locals
	$list (l) [без аргументов, имя файла:номер строки, имя функции, от ... до]
	$print (p) [/d,u,x,o,t,c /a /s]
	$p x / (int[25])*x - массивы (статический и динамический)
	$p/x (uint8_t[size])S - серилизация структуры

6) Точки останова и наблюдения:

	$break (b) [номер строки, имя файла:номер строки, имя функции]
	$b [...] if i==42 	
	$watchpoint (w) [...]
	$w [...] if i==42

	$info breakpoints
	$enable/disable #breakpoint

7) Навигация:

	$run (r)
	$step (s)
	$next (n)
	$continue (c)
	$finish (f)

8) Задание значения переменной:

	$set var i = ...

9) Трассировка вызовов:

	$bt
	$frame (f #frame)

10) Анализ дампа:

	gdb ./a.out core-file

Статический анализ====================================================

	cppcheck profiling.cpp
	splint +weak profiling.c

Динамический анализ===================================================

	valgrind --leak-check=full ./a.out

Профилировка==========================================================

	Это	1) Анализ скорости выполнения кода
		2) Анализ насколько часто выполняется тот или иной метод/функция	
		



